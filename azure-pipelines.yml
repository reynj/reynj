trigger:
  batch: false
  branches:
    include:
    - master
    - refs/tags/*

stages:
- stage: 'Build'
  variables:
    buildConfiguration: 'Release'

  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: gitversion/setup@0
      displayName: 'Install GitVersion'
      inputs:
        versionSpec: '5.x'
  
    - task: gitversion/execute@0
      displayName: 'Determine application version with GitVersion'
      name: GitVersion


    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet 6.11.x'
      inputs:
        versionSpec: '6.11.x'

    - task: NuGetAuthenticate@1

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 2.1.x'
      inputs:
        packageType: sdk
        version: 2.1.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 3.1.x'
      inputs:
        packageType: sdk
        version: 3.1.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 5.0.x'
      inputs:
        packageType: sdk
        version: 5.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 6.0.x'
      inputs:
        packageType: sdk
        version: 6.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 7.0.x'
      inputs:
        packageType: sdk
        version: 7.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 8.0.x'
      inputs:
        packageType: sdk
        version: 8.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 9.0.x'
      inputs:
        packageType: sdk
        version: 9.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet


    - task: DotNetCoreCLI@2
      displayName: 'Restore Local Tools'
      inputs:
        command: custom
        custom: 'tool'
        arguments: 'restore'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: restore


    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: build
        arguments: '--no-restore --configuration $(buildConfiguration) /p:Version=$(GitVersion.FullSemVer)'

    - task: DotNetCoreCLI@2
      displayName: 'Test Project'
      inputs:
        command: test
        arguments: '--no-build --no-restore --configuration $(buildConfiguration) --collect "XPlat Code Coverage" -- xunit.parallelizeAssembly=true -- xunit.parallelizeTestCollections=true -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByAttribute="Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute"'
        publishTestResults: true

    - task: DotNetCoreCLI@2
      displayName: 'Generate Code Coverage Report'
      inputs:
        command: 'custom'
        custom: 'reportgenerator'
        arguments: '-reports:"$(Agent.TempDirectory)/**/coverage.cobertura.xml" -targetdir:"$(Agent.TempDirectory)/CoverageReport" -reporttypes:HtmlInline_AzurePipelines;Cobertura -tag:$(GitVersion.FullSemVer)'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Results'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Agent.TempDirectory)/CoverageReport/Cobertura.xml
        reportDirectory: $(Agent.TempDirectory)/CoverageReport
      env:
        DISABLE_COVERAGE_AUTOGENERATE: 'true'


    - task: DotNetCoreCLI@2
      displayName: 'Pack Project'
      inputs:
        command: pack
        packagesToPack: '**/*.csproj;!**/*Tests.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
        configuration: '$(buildConfiguration)'
        nobuild: true
        includesymbols: true
        buildProperties: 'Version=$(GitVersion.FullSemVer)'

    - publish: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'packages'


- stage: 'Publish'
  dependsOn: 'Build'
  condition: succeeded()

  jobs:
  - deployment:
    pool:
      vmImage: 'ubuntu-latest'

    environment: 'NuGet'

    continueOnError: true

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: packages

          - task: NuGetToolInstaller@1
            displayName: 'Install NuGet 6.11.x'
            inputs:
              versionSpec: '6.11.x'

          - task: NuGetAuthenticate@1

          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/packages/*.nupkg;!$(Pipeline.Workspace)/packages/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'Reynj NuGet'